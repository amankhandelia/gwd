use crate::error::{AppError, Result};
use rand::seq::SliceRandom;
use rand::thread_rng;
use std::io::{self, Write}; // Import Write trait for flush

// Same word list as the PowerShell script
const CHALLENGE_WORDS: &[&str] = &[
    "account",
    "achieve",
    "adapt",
    "administration",
    "admit",
    "affect",
    "agency",
    "agenda",
    "almost",
    "already",
    "although",
    "analysis",
    "animal",
    "another",
    "answer",
    "appear",
    "apply",
    "approach",
    "approve",
    "argue",
    "around",
    "article",
    "artist",
    "assume",
    "attack",
    "attention",
    "attorney",
    "audience",
    "author",
    "available",
    "avoid",
    "beautiful",
    "because",
    "become",
    "before",
    "begin",
    "behavior",
    "behind",
    "believe",
    "benefit",
    "better",
    "between",
    "beyond",
    "billion",
    "budget",
    "building",
    "business",
    "campaign",
    "cancer",
    "candidate",
    "capital",
    "career",
    "carry",
    "catch",
    "cause",
    "center",
    "central",
    "century",
    "certain",
    "challenge",
    "chance",
    "change",
    "character",
    "charge",
    "check",
    "choice",
    "choose",
    "church",
    "citizen",
    "civil",
    "claim",
    "clear",
    "close",
    "coach",
    "collect",
    "college",
    "common",
    "community",
    "company",
    "compare",
    "computer",
    "concern",
    "condition",
    "conference",
    "congress",
    "consider",
    "consumer",
    "contain",
    "continue",
    "control",
    "could",
    "country",
    "couple",
    "course",
    "court",
    "cover",
    "create",
    "culture",
    "current",
    "customer",
    "darkness",
    "daughter",
    "debate",
    "decade",
    "decide",
    "decision",
    "defense",
    "degree",
    "democrat",
    "describe",
    "design",
    "despite",
    "detail",
    "determine",
    "develop",
    "difference",
    "difficult",
    "dinner",
    "director",
    "discover",
    "discuss",
    "disease",
    "doctor",
    "dream",
    "drive",
    "during",
    "economic",
    "economy",
    "education",
    "effect",
    "effort",
    "either",
    "election",
    "employee",
    "energy",
    "enjoy",
    "enough",
    "entire",
    "environment",
    "especial",
    "establish",
    "evening",
    "event",
    "every",
    "evidence",
    "exactly",
    "example",
    "executive",
    "expect",
    "experience",
    "explain",
    "factor",
    "family",
    "father",
    "federal",
    "feeling",
    "field",
    "figure",
    "final",
    "financial",
    "finish",
    "floor",
    "focus",
    "follow",
    "force",
    "foreign",
    "forget",
    "former",
    "forward",
    "friend",
    "future",
    "garden",
    "general",
    "generation",
    "glass",
    "global",
    "ground",
    "growth",
    "guess",
    "happen",
    "health",
    "heart",
    "history",
    "hospital",
    "hotel",
    "however",
    "hundred",
    "husband",
    "identify",
    "imagine",
    "impact",
    "important",
    "improve",
    "include",
    "increase",
    "indeed",
    "indicate",
    "industry",
    "inform",
    "instead",
    "interest",
    "interview",
    "involve",
    "issue",
    "itself",
    "knowledge",
    "language",
    "large",
    "later",
    "laugh",
    "lawyer",
    "leader",
    "learn",
    "leave",
    "legal",
    "letter",
    "level",
    "listen",
    "little",
    "local",
    "machine",
    "magazine",
    "maintain",
    "major",
    "manage",
    "manager",
    "market",
    "marriage",
    "material",
    "matter",
    "measure",
    "media",
    "medical",
    "meeting",
    "member",
    "memory",
    "mention",
    "message",
    "method",
    "middle",
    "might",
    "military",
    "million",
    "minute",
    "mission",
    "model",
    "modern",
    "moment",
    "money",
    "month",
    "morning",
    "mother",
    "movement",
    "movie",
    "music",
    "myself",
    "nation",
    "natural",
    "nearly",
    "necessary",
    "network",
    "never",
    "north",
    "notice",
    "occur",
    "offer",
    "office",
    "officer",
    "official",
    "often",
    "operation",
    "opportunity",
    "option",
    "order",
    "organization",
    "other",
    "outside",
    "owner",
    "painting",
    "paper",
    "parent",
    "partner",
    "party",
    "patient",
    "pattern",
    "peace",
    "people",
    "perform",
    "period",
    "person",
    "personal",
    "phone",
    "physical",
    "picture",
    "piece",
    "place",
    "plant",
    "player",
    "point",
    "policy",
    "political",
    "politics",
    "popular",
    "position",
    "positive",
    "possible",
    "power",
    "practice",
    "prepare",
    "present",
    "president",
    "pressure",
    "pretty",
    "prevent",
    "price",
    "private",
    "probably",
    "problem",
    "process",
    "produce",
    "product",
    "professor",
    "program",
    "project",
    "property",
    "protect",
    "prove",
    "provide",
    "public",
    "purpose",
    "quality",
    "question",
    "quickly",
    "quite",
    "radio",
    "raise",
    "range",
    "rather",
    "reach",
    "ready",
    "reality",
    "reason",
    "receive",
    "recent",
    "recognize",
    "record",
    "reduce",
    "reflect",
    "region",
    "relate",
    "remain",
    "remember",
    "remove",
    "report",
    "represent",
    "require",
    "research",
    "resource",
    "respond",
    "response",
    "result",
    "return",
    "reveal",
    "right",
    "scene",
    "school",
    "science",
    "season",
    "second",
    "section",
    "security",
    "senior",
    "sense",
    "series",
    "serious",
    "serve",
    "service",
    "seven",
    "several",
    "shake",
    "share",
    "shoot",
    "short",
    "should",
    "shoulder",
    "significant",
    "similar",
    "simple",
    "since",
    "single",
    "sister",
    "skill",
    "small",
    "smile",
    "social",
    "society",
    "soldier",
    "somebody",
    "someone",
    "something",
    "sometimes",
    "source",
    "south",
    "space",
    "speak",
    "special",
    "specific",
    "speech",
    "spend",
    "sport",
    "spring",
    "staff",
    "stage",
    "stand",
    "standard",
    "start",
    "state",
    "station",
    "still",
    "stock",
    "stop",
    "store",
    "story",
    "strategy",
    "street",
    "strong",
    "structure",
    "student",
    "study",
    "stuff",
    "style",
    "subject",
    "success",
    "suddenly",
    "suffer",
    "suggest",
    "summer",
    "support",
    "surface",
    "system",
    "table",
    "teach",
    "teacher",
    "technology",
    "television",
    "thank",
    "themselves",
    "theory",
    "there",
    "these",
    "thing",
    "think",
    "third",
    "those",
    "though",
    "thought",
    "thousand",
    "threat",
    "three",
    "through",
    "throw",
    "tight",
    "today",
    "together",
    "tonight",
    "total",
    "tough",
    "toward",
    "trade",
    "traditional",
    "training",
    "travel",
    "treat",
    "treatment",
    "trial",
    "trouble",
    "truth",
    "under",
    "understand",
    "until",
    "usually",
    "value",
    "various",
    "victim",
    "violence",
    "visit",
    "voice",
    "watch",
    "water",
    "weapon",
    "weight",
    "whatever",
    "where",
    "whether",
    "which",
    "while",
    "white",
    "whole",
    "whose",
    "window",
    "within",
    "without",
    "woman",
    "wonder",
    "worker",
    "world",
    "worry",
    "would",
    "write",
    "writer",
    "wrong",
    "yourself",
];

pub fn run_challenge(domain: &str, word_count: usize) -> Result<()> {
    if word_count == 0 {
        // Skip challenge if count is zero
        println!("Challenge length set to 0, skipping challenge.");
        return Ok(());
    }
    if word_count > CHALLENGE_WORDS.len() {
        eprintln!("Warning: Challenge length ({}) is greater than the number of available words ({}). Using all words.", word_count, CHALLENGE_WORDS.len());
        // Proceed with the maximum number of words instead of erroring out
    }

    let mut rng = thread_rng();
    // Use min to avoid panic if word_count > CHALLENGE_WORDS.len()
    let challenge_sequence: Vec<&str> = CHALLENGE_WORDS
        .choose_multiple(&mut rng, word_count.min(CHALLENGE_WORDS.len()))
        .cloned()
        .collect();
    let challenge_string = challenge_sequence.join(" ");

    println!("--- Unblock Challenge ---");
    println!(
        "To proceed with unblocking '{}', please type the following sequence EXACTLY:",
        domain
    );
    println!("{}", challenge_string);
    println!("-------------------------");
    print!("Enter the sequence: ");
    io::stdout().flush()?; // Ensure the prompt is displayed before reading input

    let mut user_input = String::new();
    io::stdin().read_line(&mut user_input)?;

    if user_input.trim() == challenge_string {
        println!("Challenge passed!");
        Ok(())
    } else {
        Err(AppError::ChallengeFailed)
    }
}
